// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  isAuthenticated Boolean   @default(false)
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
}

model Profile {
  id       String   @id @default(cuid())
  userId   String   @unique
  name     String
  username String   @unique
  image    String?
  bio      String?
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweets   Tweet[]
  likes    Like[]
}

model Tweet {
  id                 String    @id @default(cuid())
  authorId           String
  type               TweetType @default(TWEET)
  content            String?
  timeCreated        DateTime  @default(now())
  retweetReferenceId String?
  retweetReference   Tweet?    @relation("Retweets", fields: [retweetReferenceId], references: [id])
  retweets           Tweet[]   @relation("Retweets")
  replyReferenceId   String?
  replyReference     Tweet?    @relation("Replies", fields: [replyReferenceId], references: [id])
  replies            Tweet[]   @relation("Replies")
  author             Profile   @relation(fields: [authorId], references: [userId])
  likes              Like[]
}

enum TweetType {
  TWEET
  RETWEET
  REPLY
}

model Like {
  id      String  @id @default(cuid())
  userId  String
  tweetId String
  user    Profile @relation(fields: [userId], references: [userId])
  tweet   Tweet   @relation(fields: [tweetId], references: [id])
}

model Hashtag {
  hashtag String @unique
}
