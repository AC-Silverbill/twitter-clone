// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  isAuthenticated Boolean   @default(false)
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
}

model Profile {
  id                        String            @id @default(cuid())
  userId                    String            @unique
  nickname                  String
  username                  String            @unique
  image                     String?
  bio                       String?
  location                  String?
  website                   String?
  joinedAt                  DateTime          @default(now())
  user                      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweets                    Tweet[]
  likes                     Like[]
  followers                 Follow[]          @relation("Followers")
  followings                Follow[]          @relation("Following")
  popularityScoreProfiles   PopularityScore[] @relation("PopularityScoreProfile")
  popularityScoreFollowings PopularityScore[] @relation("PopularityScoreFollowing")
  bookmarks                 Bookmark[]
  SendedNotifications       Notification[]    @relation("SenderProfile")
  ReceivedNotifications     Notification[]    @relation("RecieverProfile")
}

model Tweet {
  id                 String     @id @default(cuid())
  authorUsername     String
  type               TweetType  @default(TWEET)
  content            String?
  attachments        String[]
  timeCreated        DateTime   @default(now())
  retweetReferenceId String?
  retweetReference   Tweet?     @relation("Retweets", fields: [retweetReferenceId], references: [id], onDelete: Cascade)
  retweets           Tweet[]    @relation("Retweets")
  replyReferenceId   String?
  replyReference     Tweet?     @relation("Replies", fields: [replyReferenceId], references: [id], onDelete: Cascade)
  replies            Tweet[]    @relation("Replies")
  author             Profile    @relation(fields: [authorUsername], references: [username], onDelete: Cascade)
  likes              Like[]
  bookmarks          Bookmark[]
}

enum TweetType {
  TWEET
  RETWEET
  REPLY
}

model Follow {
  id               String  @id @default(cuid())
  followerUsername String
  followeeUsername String
  follower         Profile @relation("Following", fields: [followerUsername], references: [username], onDelete: Cascade)
  followee         Profile @relation("Followers", fields: [followeeUsername], references: [username], onDelete: Cascade)

  @@unique([followerUsername, followeeUsername])
}

model Like {
  id            String   @id @default(cuid())
  likerUsername String
  tweetId       String
  timeLiked     DateTime @default(now())
  liker         Profile  @relation(fields: [likerUsername], references: [username], onDelete: Cascade)
  tweet         Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@unique([likerUsername, tweetId])
}

model PopularityScore {
  id                String  @id @default(cuid())
  profileUsername   String
  followingUsername String
  score             Int
  profile           Profile @relation("PopularityScoreProfile", fields: [profileUsername], references: [username], onDelete: Cascade)
  following         Profile @relation("PopularityScoreFollowing", fields: [followingUsername], references: [username], onDelete: Cascade)

  @@unique([profileUsername, followingUsername])
}

model Bookmark {
  id                 String   @id @default(cuid())
  bookmarkerUsername String
  tweetId            String
  timeBookmarked     DateTime @default(now())
  bookmarker         Profile  @relation(fields: [bookmarkerUsername], references: [username], onDelete: Cascade)
  tweet              Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Notification {
  id                      String            @id @default(cuid())
  action                  NotifcationAction
  senderProfileUsername   String
  recieverProfileUsername String
  isSeen                  Boolean           @default(false)
  sentAt                  DateTime          @default(now())
  senderProfile           Profile           @relation("SenderProfile", fields: [senderProfileUsername], references: [username])
  recieverProfile         Profile           @relation("RecieverProfile", fields: [recieverProfileUsername], references: [username])
}

enum NotifcationAction {
  RETWEET
  REPLY
  LIKE
  FOLLOW
}

model Hashtag {
  hashtag String @unique
}
